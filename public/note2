  let selectedShipNameWithIndex
    let draggedShip
    let draggedShipLength

    ships.forEach(ship => ship.addEventListener('mousedown', (e) => {
        selectedShipNameWithIndex = e.target.id
        // console.log(selectedShipNameWithIndex)
    }))

    function dragStart() {
        draggedShip = this
        draggedShipLength = this.children.length // change childnode to chidren
    }

    function dragOver(e) {
        e.preventDefault()
    }

    function dragEnter(e) {
        e.preventDefault()
    }

    function dragLeave() {
        // console.log('drag leave')
    }
    let shipPlaced = [];

    function dragDrop() {
        let shipNameWithLastId = draggedShip.lastElementChild.id;// change lastChild => lastElementChild



     let directionClass
                if (i === 0) directionClass = 'start'
                if (i === draggedShipLength - 1) directionClass = 'end'
                userSquares[parseInt(this.dataset.id) - selectedShipIndex + i].classList.add('taken', 'horizontal', directionClass, shipClass)




    let shipPlaced = [];

       function dragDrop() {
            let shipNameWithLastId = draggedShip.lastElementChild.id;// change lastChild => lastElementChild
            let shipClass = shipNameWithLastId.slice(0, -2)
            let lastShipIndex = parseInt(shipNameWithLastId.substr(-1))
            let shipLastId = lastShipIndex + parseInt(this.dataset.id)

            const notAllowedHorizontal = [0,10,20,30,40,50,60,70,80,90,1,11,21,31,41,51,61,71,81,91,2,22,32,42,52,62,72,82,92,3,13,23,33,43,53,63,73,83,93]
            const notAllowedVertical = [99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60]
            let newNotAllowedHorizontal = notAllowedHorizontal.splice(0, 10 * lastShipIndex);


            let newNotAllowedVertical = notAllowedVertical.splice(0, 10 * lastShipIndex)
            selectedShipIndex = parseInt(selectedShipNameWithIndex.substr(-1))
            // this condition to calculate which place is not allowed to put the ship is lack of pushing the index of other ships.
            shipLastId = shipLastId - selectedShipIndex;
            let shipFirstId = shipLastId - lastShipIndex;
            let shipLastIdVert = shipLastId - selectedShipIndex*10;
            let shipFirstIdVert = shipLastIdVert + selectedShipIndex*10;
            if (isHorizontal && !newNotAllowedHorizontal.includes(shipLastId) && !shipPlaced.includes(shipLastId) && !shipPlaced.includes(shipFirstId)) {
                for (let i=0; i < draggedShipLength; i++) {
                    let directionClass
                    if (i === 0) directionClass = 'start'
                    if (i === draggedShipLength - 1) directionClass = 'end'
                    userSquares[parseInt(this.dataset.id) - selectedShipIndex + i].classList.add('taken', 'horizontal', directionClass, shipClass)
                    shipPlaced.push(parseInt(this.dataset.id) - selectedShipIndex + i)
                }


            }
            else if (!isHorizontal && !newNotAllowedVertical.includes(shipLastIdVert) && !shipPlaced.includes(shipLastIdVert) && !shipPlaced.includes(shipFirstIdVert)) {
                for (let i=0; i < draggedShipLength; i++) {
                    let directionClass
                    if (i === 0) directionClass = 'start'
                    if (i === draggedShipLength - 1) directionClass = 'end'
                    userSquares[parseInt(this.dataset.id) - selectedShipIndex*10 + width*i].classList.add('taken','vertical',directionClass, shipClass)
                    shipPlaced.push(parseInt(this.dataset.id) - selectedShipIndex*10 + width*i)

                }
            } else return
            displayGrid.removeChild(draggedShip)
            if(!displayGrid.querySelector('.ship')) allShipPlaced = true;
        }
